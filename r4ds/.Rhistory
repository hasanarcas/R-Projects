library(skimr)
skimmed <- skim_to_wide(trainData)
skimmed[, c(1:5, 9:11, 13, 15:16)]
skimmed
View(skimmed)
model on the training data
preProcess_missingdata_model <- preProcess(trainData, method='knnImpute')
preProcess_missingdata_model
library(RANN)
anyNA(trainData)
# One-Hot Encoding
# Creating dummy variables is converting a categorical variable to as many binary variables as here are categories.
dummies_model <- dummyVars(Purchase ~ ., data=trainData)
# Create the dummy variables using predict. The Y variable (Purchase) will not be present in trainData_mat.
trainData_mat <- predict(dummies_model, newdata = trainData)
# # Convert to dataframe
trainData <- data.frame(trainData_mat)
# # See the structure of the new dataset
str(trainData)
apply(trainData[, 1:10], 2, FUN=function(x){c('min'=min(x), 'max'=max(x))})
preProcess_range_model <- preProcess(trainData, method='range')
trainData <- predict(preProcess_range_model, newdata = trainData)
# Append the Y variable
trainData$Purchase <- y
apply(trainData[, 1:10], 2, FUN=function(x){c('min'=min(x), 'max'=max(x))})
featurePlot(x = trainData[, 1:18],
y = trainData$Purchase,
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = trainData$Purchase,
plot = "density",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
install.packages("ellipse")
library(ellipse)
featurePlot(x = trainData[, 1:18],
y = trainData$Purchase,
plot = "density",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = trainData$Purchase,
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = asFactor(trainData$Purchase),
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = as.factor(trainData$Purchase),
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = as.factor(trainData$Purchase),
plot = "density",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
source("C:/Users/hasan/Desktop/Projects/R-Projects/r4ds/strings.R")
library(tidyverse)
library(caret)
library(skimr)
library(RANN)
orange <- read.csv('https://raw.githubusercontent.com/selva86/datasets/master/orange_juice_withmissing.csv')
# Create the training and test datasets
set.seed(100)
# Step 1: Get row numbers for the training data
trainRowNumbers <- createDataPartition(orange$Purchase, p=0.8, list=FALSE)
# Step 2: Create the training  dataset
trainData <- orange[trainRowNumbers,]
# Step 3: Create the test dataset
testData <- orange[-trainRowNumbers,]
# Store X and Y for later use.
x = trainData[, 2:18]
y = trainData$Purchase
skimmed <- skim_to_wide(trainData)
skimmed[, c(1:5, 9:11, 13, 15:16)]
# Create the knn imputation model on the training data
preProcess_missingdata_model <- preProcess(trainData, method='knnImpute')
preProcess_missingdata_model
trainData <- predict(preProcess_missingdata_model, newdata = trainData)
anyNA(trainData)
# One-Hot Encoding
# Creating dummy variables is converting a categorical variable to as many binary variables as here are categories.
dummies_model <- dummyVars(Purchase ~ ., data=trainData)
# Create the dummy variables using predict. The Y variable (Purchase) will not be present in trainData_mat.
trainData_mat <- predict(dummies_model, newdata = trainData)
# # Convert to dataframe
trainData <- data.frame(trainData_mat)
# # See the structure of the new dataset
str(trainData)
preProcess_range_model <- preProcess(trainData, method='range')
trainData <- predict(preProcess_range_model, newdata = trainData)
# Append the Y variable
trainData$Purchase <- y
apply(trainData[, 1:10], 2, FUN=function(x){c('min'=min(x), 'max'=max(x))})
featurePlot(x = trainData[, 1:18],
y = as.factor(trainData$Purchase),
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = as.factor(trainData$Purchase),
plot = "density",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
set.seed(100)
options(warn=-1)
subsets <- c( 15, 18)
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 2,
verbose = FALSE)
lmProfile <- rfe(x=trainData[, 1:18], y=as.factor(trainData$Purchase),
sizes = subsets,
rfeControl = ctrl)
lmProfile
lmProfile
# Train the model using randomForest and predict on the training data itself.
model_mars = train(Purchase ~ ., data=trainData, method='earth')
fitted <- predict(model_mars)
# Set the seed for reproducibility
set.seed(100)
# Train the model using randomForest and predict on the training data itself.
model_mars = train(Purchase ~ ., data=trainData, method='earth')
fitted <- predict(model_mars)
model_mars
plot(model_mars, main="Model Accuracies with MARS")
# Set the seed for reproducibility
set.seed(110)
# Train the model using randomForest and predict on the training data itself.
model_mars = train(Purchase ~ ., data=trainData, method='earth')
fitted <- predict(model_mars)
model_mars
plot(model_mars, main="Model Accuracies with MARS")
set.seed(10)
# Train the model using randomForest and predict on the training data itself.
model_mars = train(Purchase ~ ., data=trainData, method='earth')
fitted <- predict(model_mars)
model_mars
plot(model_mars, main="Model Accuracies with MARS")
library(rvest)
library(dplyr)
library(RCurl)
getwd
getwd()
setwd("../scraping_trials/games__features_scraping")
getwd()
df <- read.csv("new_released_games_data.csv")
View(df)
df[5][1] <- "Streets of Rage 4: Mr. X Nightmare"
View(df)
View(df)
df <- read.csv("new_released_games_data.csv")
View(df)
df[5]
df <- read.csv("new_released_games_data.csv", col.names = F)
df <- read.csv("new_released_games_data.csv", row.names = F)
df <- read.csv("new_released_games_data.csv", header = F)
View(df)
View(df)
df <- read.csv("new_released_games_data.csv" )
View(df)
df <- df[2:]
df <- df[2:6]
View(df)
df[5]
df[1][5]
df[1,5]
df[2,5]
df[5,1]
df[5,1] <- "Streets of Rage 4: Mr. X Nightmare"
View(df)
df[5,2] <- "The fight continues in Wood Oak City. After the events of Streets of Rage 4, our heroes wanted to prepare themselves for future threats. Axel, Blaze and their mates will start a very special deranged training with the help of Dr. Zan, who built an AI program from the remnants of Mister X’s brain that simulates every kind of danger they could be facing. With this new DLC, get ready for: • 3 new playable characters • A new Survival mode with weekly challenges • Character customization: build your own fighting style with new moves • New weapons and enemies!"
View(df)
df[5,2] <- 88
df[5,3] <- "The fight continues in Wood Oak City. After the events of Streets of Rage 4, our heroes wanted to prepare themselves for future threats. Axel, Blaze and their mates will start a very special deranged training with the help of Dr. Zan, who built an AI program from the remnants of Mister X’s brain that simulates every kind of danger they could be facing. With this new DLC, get ready for: • 3 new playable characters • A new Survival mode with weekly challenges • Character customization: build your own fighting style with new moves • New weapons and enemies!"
df[5,5] <- "Lizardcube"
View(df)
df[14,3] <- "ENDER LILIES is a dark fantasy 2D Action RPG about unraveling the mysteries of a destroyed kingdom. On this sorrowful path, encounter horrific enemies against whom a moment of inattention could be fatal. Overcome the hardships of your journey and reach the truth with the fallen knights."
df[14,4] <- "Action Adventure"                                            #genre
df[14,5] <- "Live Wire"                                #dev
View(df)
df[15,4] <- "Racing"                                            #genre
df[15,5] <- "Codemasters"                                #dev
df[23,1] <- "The Legend of Tianding"       #name
df[23,2] <- 84                                         #points
df[23,3] <- "The Legend of Tianding is a sidescrolling action game about Liao Tianding, the legendary Taiwanese Folk Hero. Explore the dazzling streets of Colonial Japanese Taiwan in the early 20th century."
df[23,4] <- "Platformer"                                            #genre
df[23,5] <- "Neon Doctrine"                                #dev
df[23,4] <- "Neon Doctrine"                                            #dev
df[23,5] <- "Platformer"                                #genre
df[15,4] <- "Racing"                                            #dev
df[15,5] <- "Codemasters"                                #genre
View(df)
df[14,4] <- "Codemasters"                                            #dev
df[14,5] <- "Racing"                                #genre
df[15,4] <- "Codemasters"                                            #dev
df[15,5] <- "Racing"                                #genre
df[14,4] <- "Live Wire"                                            #dev
df[14,5] <- "Action Adventure"                                #genre
df[26,3] <- "An UNCONVENTIONAL ADVENTURE RPG that takes place in an inexpressible world filled with amusing musical battles and strange delightful encounters. To put it simply: You are in for a ride."
df[26,4] <- "Foreign Gnomes"                                            #dev
df[26,5] <- "Action Adventure"                                #genre
df[36,5] <- "Strategy"                                #genre
df[57,3] <- "The remastered version of Quake is here."
df[57,4] <- "id Software"                                            #dev
df[36,5] <- "Action"                                #genre
df[57,5] <- "Action"                                #genre
df[36,5] <- "Strategy"                                #genre
df[64,3] <- "Destroy... Absorb... Grow... GRIME is a fast and unforgiving Action-Adventure RPG in which you crush your foes with living weapons that mutate form and function, and then consume their remains with a black hole to strengthen your vessel as you break apart a world of anatomical horror and intrigue."
df[64,4] <- "Funnel Entertainment"                                            #dev
df[64,5] <- "Action"                                #genre
df[84,1] <- "NieR Replicant ver.1.22474487139..."       #name
df[84,3] <- "Get ready to experience where the NieR series all began - NieR Replicant ver.1.22474487139...Set in a post-apocalyptic world, NieR Replicant ver.1.22474487139 is puts you in the role of the titular Nier, a young man on a quest to cure his sister Yonah of a deadly disease. What they discover will make them question everything they thought they knew The original NieR release has an interesting history. In Japan, there were two versions of the game: NieR Replicant and NieR Gestalt. NieR Replicant focused on Brother Nier and his sister Yonah. In NieR Gestalt, the main character was Father Nier, and Yonah his daughter. Only NieR Gestalt released in the West (under the name NIER) - so excitingly, this will be the first time many people will have played the Replicant version of the game"
df[84,3] <- "Toylogic Inc."
Get ready to experience where the NieR series all began - NieR Replicant ver.1.22474487139...Set in a post-apocalyptic world, NieR Replicant ver.1.22474487139 is puts you in the role of the titular Nier, a young man on a quest to cure his sister Yonah of a deadly disease. What they discover will make them question everything they thought they knew The original NieR release has an interesting history. In Japan, there were two versions of the game: NieR Replicant and NieR Gestalt. NieR Replicant focused on Brother Nier and his sister Yonah. In NieR Gestalt, the main character was Father Nier, and Yonah his daughter. Only NieR Gestalt released in the West (under the name NIER) - so excitingly, this will be the first time many people will have played the Replicant version of the game
df[84,3] <- "Get ready to experience where the NieR series all began - NieR Replicant ver.1.22474487139...Set in a post-apocalyptic world, NieR Replicant ver.1.22474487139 is puts you in the role of the titular Nier, a young man on a quest to cure his sister Yonah of a deadly disease. What they discover will make them question everything they thought they knew The original NieR release has an interesting history. In Japan, there were two versions of the game: NieR Replicant and NieR Gestalt. NieR Replicant focused on Brother Nier and his sister Yonah. In NieR Gestalt, the main character was Father Nier, and Yonah his daughter. Only NieR Gestalt released in the West (under the name NIER) - so excitingly, this will be the first time many people will have played the Replicant version of the game"
df[84,4] <- "Toylogic Inc."                                            #dev
df[84,5] <- "Role-playing"                                #genre
df[84,2] <- 80                                         #points
df[5,4] <- "Lizardcube"                                            #dev
df[5,5] <- "Action"                                #genre
getwd()
write.csv(df, "new_released_games_data.csv")
all_games_link <- "https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered"
page <- read_html(all_games_link)
all_games_list <- page %>%
html_nodes(".title h3") %>%
html_text()
all_games_list1 <- page %>%
html_nodes(".title h3") %>%
html_text()
all_games_link <- "https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered?page=1"
page <- read_html(all_games_link)
all_games_list2 <- page %>%
html_nodes(".title h3") %>%
html_text()
all_games_list2
games <- data.frame(matrix(ncol=5, nrow=0))
col_names <- c("name", "point", "summary", "dev", "genre")
colnames(games) <- col_names
get_links <- function(game_link){
game_link <- game_link %>%
gsub(" ", "-", ., fixed = T) %>%
gsub(":", "", ., fixed = T) %>%
gsub("'", "", ., fixed = T) %>%
tolower()
game_page <- paste("https://www.metacritic.com/game/pc/",game_link, sep = "")
return(game_page)
}
links1 <- sapply(all_games_list1, get_links, USE.NAMES = F)
links2 <- sapply(all_games_list2, get_links, USE.NAMES = F)
get_game_features <- function(link){
print(link)
game_link <- read_html(link)
features <- game_link %>%
html_nodes(".product_summary .data span , .product_genre .label+ .data , .button , .positive span , h1") %>%
html_text()
if(length(features) > 5){
features <- features[c(1, 2, 5, 8, 9)]
}
games[nrow(games) + 1,] =  features
return(games)
}
games <- t(sapply(links1, get_game_features, USE.NAMES = F))
View(games)
games <- t(sapply(links2, get_game_features, USE.NAMES = F))
links <- c(links1,links2)
links
games <- t(sapply(links, get_game_features, USE.NAMES = F))
games <- data.frame(matrix(ncol=5, nrow=0))
col_names <- c("name", "point", "summary", "dev", "genre")
colnames(games) <- col_names
games <- t(sapply(links, get_game_features, USE.NAMES = F))
links[140]
links[141]
links[141] <- "https://www.metacritic.com/game/pc/there-is-no-game-wrong-dimension"
links[141]
games <- t(sapply(links, get_game_features, USE.NAMES = F))
View(games)
games_df <- as.data.frame(games) %>%
apply( 2, as.character)
View(games_df)
write.csv(games_df,"best_games_data.csv")
games_df_2 <- read.csv("best_games_data.csv")
View(games_df_2)
img_src <- read_html("https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered") %>%
html_nodes(".clamp-image-wrap a img") %>%
html_attr("src")
img_src1 <- read_html("https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered") %>%
html_nodes(".clamp-image-wrap a img") %>%
html_attr("src")
img_src2 <- read_html("https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered?page=1") %>%
html_nodes(".clamp-image-wrap a img") %>%
html_attr("src")
img_src <- c(img_src1, img_src2)
img_src
x <- c(1:200)
x <- c(1:3)
for(i in x){
download.file(img_src[i], "./best_games_images/", mode = "wb")
}
for(i in x){
download.file(img_src[i], "best_games_images/", mode = "wb")
}
for(i in x){
download.file(img_src[i], "best_games_images/", mode = "wb")
}
for(i in x){
download.file(img_src[i], "best_games_images/", mode = "wb")
}
all_games_list1 <- all_games_list1 %>%
gsub(" ", "-", ., fixed = T) %>%
gsub(":", "", ., fixed = T) %>%
gsub("'", "", ., fixed = T) %>%
tolower()
all_games_list1
all_games_list2 <- all_games_list2 %>%
gsub(" ", "-", ., fixed = T) %>%
gsub(":", "", ., fixed = T) %>%
gsub("'", "", ., fixed = T) %>%
tolower()
all <- c(all_games_list1, all_games_list2)
all
for(i in x){
download.file(img_src[i], paste("./best_games_images/",all[i], ".jpg" ), mode = "wb")
}
x <- c(1:200)
for(i in x){
download.file(img_src[i], paste("./best_games_images/",all[i], ".jpg" ), mode = "wb")
}
getwd()
setwd("../scraping_trials/games__features_scraping/")
df <- read.csv("best_games_data.csv")
View(df)
df <- df[name:genre]
df <- df["name":"genre"]
df <- df[2:]
df <- df[2:-1]
df <- df[2:6]
#name
df[61:1] <-
#points
df[61:2] <-
#summary
df[61:3] <-
#dev
df[61:4] <-
#genre
df[6:5] <- "Action"
View(df)
df <- df[2:6]
#name
df[61,1] <-
#points
df[61,2] <-
#summary
df[61,3] <-
#dev
df[61,4] <-
#genre
df[6,5] <- "Action"
df <- df[2:6]
df <- read.csv("best_games_data.csv")
df <- df[2:6]
View(df)
#name
df[61,1] <-
#points
df[61,2] <-
#summary
df[61,3] <-
#dev
df[61,4] <-
#genre
df[6,5] <- "Action"
#name
df[61,1] <-
#points
df[61,2] <-
#summary
df[61,3] <-
#dev
df[27,4] <- "Rockstar North"
#genre
df[27,5] <- "Action Adventure"
#genre
df[55,5] <- "Strategy"
#name
df[61,1] <- "IL-2 Sturmovik"
#points
df[61,2] <- 91
#summary
df[61,3] <- " Fly 31 types of Russian, German and American planes. Engage in air-to-air and air-to-ground battles. Multiplay with up to 32 players in dogfight and 16 players in cooperative missions. Use custom paint schemes, squadron nose art, numbering on wings, and national markings for each plane. [Ubi Soft]"
#dev
df[27,4] <- "1C Entertainment"
#genre
df[55,5] <- "Simulation"
#dev
df[27,4] <- "Rockstar North"
#genre
df[55,5] <- "Strategy"
#dev
df[61,4] <- " 1C Entertainment"
#genre
df[61,5] <- "Simulation"
#name
df[83,1] <- "No One Lives Forever 2: A Spy in H.A.R.M.'s Way"
#points
df[83,2] <- 91
#summary
df[83,3] <- "A humorous story-driven first-person shooter featuring the beautiful but deadly UNITY operative Cate Archer. Cate must investigate a super-secret Soviet project that, if successful, could bring about a third world war. Armed with an assortment of conventional and experimental weaponry and gadgets, players will explore exotic locales, circumvent devious traps, and contend with deadly agents determined to take Cate out of the spy trade once and for all. [Sierra]"
#dev
df[83,4] <- "Monolith Productions"
#genre
df[83,5] <- "Action"
#summary
df[89,3] <- "Spelunky 2 builds upon the unique, randomized challenges that made the original a roguelike classic, offering a huge adventure designed to satisfy players old and new. Meet the next generation of explorers as they find themselves on the Moon, searching for treasure and missing family."
#dev
df[89,4] <- "Mossmouth"
#genre
df[89,5] <- "Action"
#summary
df[97,3] <- "Spelunky is a unique platformer with randomized levels that offer a new and challenging experience each time you play."
#dev
df[97,4] <- "Mossmouth"
#genre
df[97,5] <- "Action"
#name
df[98,1] <- "Black & White"
#points
df[98,2] <- 90
#summary
df[98,3] <- "Peter Molyneux's highly anticipated 'god game,' a blend of the genres including strategy, sim, RPG, and puzzle, features the player as a new god in the lands of Eden who must reign with the help of uniquely evolving animals in either a benign or evil fashion."
#dev
df[98,4] <- "Lionhead Studios"
#genre
df[98,5] <- "Strategy"
#name
df[112,1] <- "Falcon 4.0: Allied Force"
#points
df[112,2] <- 90
#summary
df[112,3] <- "Pilot three different variants of the F-16 Fighting Falcon -- the best multi-role fighter ever built -- including Block 40, Block 50/52 and MLU variants. Ultra-high fidelity physics modeling closely simulates actual aircraft performance. Engage the enemy in two operational theaters -- Korea and the Balkans -- each covering over a million square Kilometers of territory. Dogfight over a wide variety of landscapes: wide seas, open grasslands, dense forests and snow capped mountains. Fly nap-of-earth missions through detailed terrain and undulating valleys. Launch a variety of air-to-air missiles like the AIM-120 AMRAAM and AIM-9 Sidewinder. Deploy a vast array of air-to-ground weaponry including the AGM-65 Maverick, AGM-88 HARM, cluster bombs, slick and high drag bombs and laser guided ordnance. Weapon systems are simulated using the most accurate publicly available specifications. Simulate an entire war with the most advanced dynamic campaign engine ever made for your PC. This remarkable feature presides over tens of thousands of vehicles: air, land and sea. No two missions ever fly the same! [Graphsim]"
#dev
df[112,4] <- "Lead Pursuit"
#genre
df[112,5] <- "Simulation"
#genre
df[110,5] <- "Action Adventure"
#name
df[126,1] <- "Command & Conquer: Red Alert"
#points
df[126,2] <- 90
#summary
df[126,3] <- "Surrender is not an option. Dark experiments have permanently altered time. Or have they? Now, Soviet tanks crush city after city while Allied cruisers shell bases. Spies lurk, land mines wait, and strange new technologies aid both sides in their struggle for ultimate control.Command & Conquer: Red Alert gives you the opportunity to be more devious, cunning and ruthless than ever before. Easy to play and highly addictive, Red Alert puts the fate of the world in your hands! [Westwood]"
#dev
df[126,4] <- "Westwood Studios"
#genre
df[126,5] <- "Strategy"
#genre
df[147,5] <- "Role-Playing"
#dev
df[155,4] <- "Out of the Park Developments"
#genre
df[155,5] <- "Sport"
#genre
df[176,5] <- "General"
#name
7df[191,1] <- "F.e.a.r"
#name
df[191,1] <- "F.e.a.r"
#points
df[191,2] <-88
#summary
df[191,3] <- "FEAR - a horror game made in realistic 3D graphics, immersing in an atmosphere of horror and fear.
The main character, Deacon, an office worker, is struggling with some illness, because of it he can control his dreams.
You have to overcome your fear, going through gloomy locations for the main character, along the way solving various puzzles and trying to understand what is happening in general, in what the lines with which Deacon accompanies various situations will help you. Believe me, the atmosphere in the game can cause fear from everything from a brick falling from a wall to a suddenly opening door."
#dev
df[191,4] <- "Night Revenge"
#genre
df[191,5] <- "Action Adventure"
#name
df[195,1] <- "Streets of Rage 4: Mr. X Nightmare"
#points
df[195,2] <-88
#summary
df[195,3] <- "The fight continues in Wood Oak City. After the events of Streets of Rage 4, our heroes wanted to prepare themselves for future threats. Axel, Blaze and their mates will start a very special deranged training with the help of Dr. Zan, who built an AI program from the remnants of Mister X’s brain that simulates every kind of danger they could be facing.
With this new DLC, get ready for:
• 3 new playable characters
• A new Survival mode with weekly challenges
• Character customization: build your own fighting style with new moves
• New weapons and enemies!"
#dev
df[195,4] <- "Lizardcube"
#genre
df[195,5] <- "Action"
write.csv(df, "best_games_data.csv")
