View(preg)
preg <- pivot_longer(preg, c(male, female), names_to = "gender", values_to = "number")
View(preg)
?separate
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j"))
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
?fill
View(coffee_points)
View(who)
View(who)
?pivot_longer
who1 <- who %>%
pivot_longer(
cols= new_sp_m014 : newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = T
)
View(who1)
View(who)
who2 <- who1 %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who1 <- who %>%
pivot_longer(
cols= new_sp_m014 : newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = T
) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
View(who1)
who1 <- who %>%
pivot_longer(
cols= new_sp_m014 : newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = T) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "type", "sexage"), sep = "_")
who1 <- who %>%
pivot_longer(
cols= new_sp_m014 : newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = T) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "type", "sexage"), sep = "_") %>%
select(-new, -iso2, -iso3)
who1 <- who %>%
pivot_longer(
cols= new_sp_m014 : newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = T) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "type", "sexage"), sep = "_") %>%
select(-new, -iso2, -iso3) %>%
separate("sexage", sep = 1)
who1 <- who %>%
pivot_longer(
cols= new_sp_m014 : newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = T) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "type", "sexage"), sep = "_") %>%
select(-new, -iso2, -iso3) %>%
separate("sexage",c("sex", "age") sep = 1)
who1 <- who %>%
pivot_longer(
cols= new_sp_m014 : newrel_f65,
names_to = "key",
values_to = "cases",
values_drop_na = T) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "type", "sexage"), sep = "_") %>%
select(-new, -iso2, -iso3) %>%
separate("sexage",c("sex", "age"), sep = 1)
View(who)
?distinct
who2 <- group_by(who1, country, year, sex)
View(who2)
who2 <- group_by(who1, country, year, sex) %>%
count()
View(who2)
who2 <- group_by(who1, country, year, sex) %>%
filter(year > 1995) %>%
summarise(cases = sum(cases))
?unite
who2 <- group_by(who1, country, year, sex) %>%
filter(year > 1995) %>%
summarise(cases = sum(cases)) %>%
unite(country_sex, country, sex, remove= F) %>%
ggplot(aes(year, cases, group= country_sex, colour = sex)) +
geom_line()
View(who2)
View(who2)
who2
library(tidyverse0)
library(tidyverse)
library(nycflights13)
airlines
airports
library(caret)
library(ISLR)
install.packages(ISLR)
"ISLR"
install.packages("ISLR")
Orange
ISLR::OJ
orange <- ISLR::OJ
View(orange)
?ISLR::OJ
(str)
str()
lm()
?lm()
View(lm)
View(str)
View(orange)
?RANN
‘??RANN’
??RANN
?preProcess
library(tidyverse)
x <- c("abc", "123")
str_c("|-", x , "-|")
name <- "Hadley"
time_of_day <- "morning"
birthday <- FALSE
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
birthday <- T
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
birthday <- F
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
source("~/.active-rstudio-document")
install.packages(c('caret', 'skimr', 'RANN', 'randomForest', 'fastAdaboost', 'gbm', 'xgboost', 'caretEnsemble', 'C50', 'earth'))
library(caret)
library(tidyverse)
library(caret)
str(orang)
str(orange)
orange <- read.csv('https://raw.githubusercontent.com/selva86/datasets/master/orange_juice_withmissing.csv')
# Create the training and test datasets
set.seed(100)
# Step 1: Get row numbers for the training data
trainRowNumbers <- createDataPartition(orange$Purchase, p=0.8, list=FALSE)
# Step 2: Create the training  dataset
trainData <- orange[trainRowNumbers,]
# Step 3: Create the test dataset
testData <- orange[-trainRowNumbers,]
# Store X and Y for later use.
x = trainData[, 2:18]
y = trainData$Purchase
library(skimr)
skimmed <- skim_to_wide(trainData)
skimmed[, c(1:5, 9:11, 13, 15:16)]
skimmed
View(skimmed)
model on the training data
preProcess_missingdata_model <- preProcess(trainData, method='knnImpute')
preProcess_missingdata_model
library(RANN)
anyNA(trainData)
# One-Hot Encoding
# Creating dummy variables is converting a categorical variable to as many binary variables as here are categories.
dummies_model <- dummyVars(Purchase ~ ., data=trainData)
# Create the dummy variables using predict. The Y variable (Purchase) will not be present in trainData_mat.
trainData_mat <- predict(dummies_model, newdata = trainData)
# # Convert to dataframe
trainData <- data.frame(trainData_mat)
# # See the structure of the new dataset
str(trainData)
apply(trainData[, 1:10], 2, FUN=function(x){c('min'=min(x), 'max'=max(x))})
preProcess_range_model <- preProcess(trainData, method='range')
trainData <- predict(preProcess_range_model, newdata = trainData)
# Append the Y variable
trainData$Purchase <- y
apply(trainData[, 1:10], 2, FUN=function(x){c('min'=min(x), 'max'=max(x))})
featurePlot(x = trainData[, 1:18],
y = trainData$Purchase,
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = trainData$Purchase,
plot = "density",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
install.packages("ellipse")
library(ellipse)
featurePlot(x = trainData[, 1:18],
y = trainData$Purchase,
plot = "density",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = trainData$Purchase,
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = asFactor(trainData$Purchase),
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = as.factor(trainData$Purchase),
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = as.factor(trainData$Purchase),
plot = "density",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
source("C:/Users/hasan/Desktop/Projects/R-Projects/r4ds/strings.R")
library(tidyverse)
library(caret)
library(skimr)
library(RANN)
orange <- read.csv('https://raw.githubusercontent.com/selva86/datasets/master/orange_juice_withmissing.csv')
# Create the training and test datasets
set.seed(100)
# Step 1: Get row numbers for the training data
trainRowNumbers <- createDataPartition(orange$Purchase, p=0.8, list=FALSE)
# Step 2: Create the training  dataset
trainData <- orange[trainRowNumbers,]
# Step 3: Create the test dataset
testData <- orange[-trainRowNumbers,]
# Store X and Y for later use.
x = trainData[, 2:18]
y = trainData$Purchase
skimmed <- skim_to_wide(trainData)
skimmed[, c(1:5, 9:11, 13, 15:16)]
# Create the knn imputation model on the training data
preProcess_missingdata_model <- preProcess(trainData, method='knnImpute')
preProcess_missingdata_model
trainData <- predict(preProcess_missingdata_model, newdata = trainData)
anyNA(trainData)
# One-Hot Encoding
# Creating dummy variables is converting a categorical variable to as many binary variables as here are categories.
dummies_model <- dummyVars(Purchase ~ ., data=trainData)
# Create the dummy variables using predict. The Y variable (Purchase) will not be present in trainData_mat.
trainData_mat <- predict(dummies_model, newdata = trainData)
# # Convert to dataframe
trainData <- data.frame(trainData_mat)
# # See the structure of the new dataset
str(trainData)
preProcess_range_model <- preProcess(trainData, method='range')
trainData <- predict(preProcess_range_model, newdata = trainData)
# Append the Y variable
trainData$Purchase <- y
apply(trainData[, 1:10], 2, FUN=function(x){c('min'=min(x), 'max'=max(x))})
featurePlot(x = trainData[, 1:18],
y = as.factor(trainData$Purchase),
plot = "box",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
featurePlot(x = trainData[, 1:18],
y = as.factor(trainData$Purchase),
plot = "density",
strip=strip.custom(par.strip.text=list(cex=.7)),
scales = list(x = list(relation="free"),
y = list(relation="free")))
set.seed(100)
options(warn=-1)
subsets <- c( 15, 18)
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 2,
verbose = FALSE)
lmProfile <- rfe(x=trainData[, 1:18], y=as.factor(trainData$Purchase),
sizes = subsets,
rfeControl = ctrl)
lmProfile
lmProfile
# Train the model using randomForest and predict on the training data itself.
model_mars = train(Purchase ~ ., data=trainData, method='earth')
fitted <- predict(model_mars)
# Set the seed for reproducibility
set.seed(100)
# Train the model using randomForest and predict on the training data itself.
model_mars = train(Purchase ~ ., data=trainData, method='earth')
fitted <- predict(model_mars)
model_mars
plot(model_mars, main="Model Accuracies with MARS")
# Set the seed for reproducibility
set.seed(110)
# Train the model using randomForest and predict on the training data itself.
model_mars = train(Purchase ~ ., data=trainData, method='earth')
fitted <- predict(model_mars)
model_mars
plot(model_mars, main="Model Accuracies with MARS")
set.seed(10)
# Train the model using randomForest and predict on the training data itself.
model_mars = train(Purchase ~ ., data=trainData, method='earth')
fitted <- predict(model_mars)
model_mars
plot(model_mars, main="Model Accuracies with MARS")
library(rvest)
library(dplyr)
library(RCurl)
getwd
getwd()
setwd("../scraping_trials/games__features_scraping")
getwd()
df <- read.csv("new_released_games_data.csv")
View(df)
df[5][1] <- "Streets of Rage 4: Mr. X Nightmare"
View(df)
View(df)
df <- read.csv("new_released_games_data.csv")
View(df)
df[5]
df <- read.csv("new_released_games_data.csv", col.names = F)
df <- read.csv("new_released_games_data.csv", row.names = F)
df <- read.csv("new_released_games_data.csv", header = F)
View(df)
View(df)
df <- read.csv("new_released_games_data.csv" )
View(df)
df <- df[2:]
df <- df[2:6]
View(df)
df[5]
df[1][5]
df[1,5]
df[2,5]
df[5,1]
df[5,1] <- "Streets of Rage 4: Mr. X Nightmare"
View(df)
df[5,2] <- "The fight continues in Wood Oak City. After the events of Streets of Rage 4, our heroes wanted to prepare themselves for future threats. Axel, Blaze and their mates will start a very special deranged training with the help of Dr. Zan, who built an AI program from the remnants of Mister X’s brain that simulates every kind of danger they could be facing. With this new DLC, get ready for: • 3 new playable characters • A new Survival mode with weekly challenges • Character customization: build your own fighting style with new moves • New weapons and enemies!"
View(df)
df[5,2] <- 88
df[5,3] <- "The fight continues in Wood Oak City. After the events of Streets of Rage 4, our heroes wanted to prepare themselves for future threats. Axel, Blaze and their mates will start a very special deranged training with the help of Dr. Zan, who built an AI program from the remnants of Mister X’s brain that simulates every kind of danger they could be facing. With this new DLC, get ready for: • 3 new playable characters • A new Survival mode with weekly challenges • Character customization: build your own fighting style with new moves • New weapons and enemies!"
df[5,5] <- "Lizardcube"
View(df)
df[14,3] <- "ENDER LILIES is a dark fantasy 2D Action RPG about unraveling the mysteries of a destroyed kingdom. On this sorrowful path, encounter horrific enemies against whom a moment of inattention could be fatal. Overcome the hardships of your journey and reach the truth with the fallen knights."
df[14,4] <- "Action Adventure"                                            #genre
df[14,5] <- "Live Wire"                                #dev
View(df)
df[15,4] <- "Racing"                                            #genre
df[15,5] <- "Codemasters"                                #dev
df[23,1] <- "The Legend of Tianding"       #name
df[23,2] <- 84                                         #points
df[23,3] <- "The Legend of Tianding is a sidescrolling action game about Liao Tianding, the legendary Taiwanese Folk Hero. Explore the dazzling streets of Colonial Japanese Taiwan in the early 20th century."
df[23,4] <- "Platformer"                                            #genre
df[23,5] <- "Neon Doctrine"                                #dev
df[23,4] <- "Neon Doctrine"                                            #dev
df[23,5] <- "Platformer"                                #genre
df[15,4] <- "Racing"                                            #dev
df[15,5] <- "Codemasters"                                #genre
View(df)
df[14,4] <- "Codemasters"                                            #dev
df[14,5] <- "Racing"                                #genre
df[15,4] <- "Codemasters"                                            #dev
df[15,5] <- "Racing"                                #genre
df[14,4] <- "Live Wire"                                            #dev
df[14,5] <- "Action Adventure"                                #genre
df[26,3] <- "An UNCONVENTIONAL ADVENTURE RPG that takes place in an inexpressible world filled with amusing musical battles and strange delightful encounters. To put it simply: You are in for a ride."
df[26,4] <- "Foreign Gnomes"                                            #dev
df[26,5] <- "Action Adventure"                                #genre
df[36,5] <- "Strategy"                                #genre
df[57,3] <- "The remastered version of Quake is here."
df[57,4] <- "id Software"                                            #dev
df[36,5] <- "Action"                                #genre
df[57,5] <- "Action"                                #genre
df[36,5] <- "Strategy"                                #genre
df[64,3] <- "Destroy... Absorb... Grow... GRIME is a fast and unforgiving Action-Adventure RPG in which you crush your foes with living weapons that mutate form and function, and then consume their remains with a black hole to strengthen your vessel as you break apart a world of anatomical horror and intrigue."
df[64,4] <- "Funnel Entertainment"                                            #dev
df[64,5] <- "Action"                                #genre
df[84,1] <- "NieR Replicant ver.1.22474487139..."       #name
df[84,3] <- "Get ready to experience where the NieR series all began - NieR Replicant ver.1.22474487139...Set in a post-apocalyptic world, NieR Replicant ver.1.22474487139 is puts you in the role of the titular Nier, a young man on a quest to cure his sister Yonah of a deadly disease. What they discover will make them question everything they thought they knew The original NieR release has an interesting history. In Japan, there were two versions of the game: NieR Replicant and NieR Gestalt. NieR Replicant focused on Brother Nier and his sister Yonah. In NieR Gestalt, the main character was Father Nier, and Yonah his daughter. Only NieR Gestalt released in the West (under the name NIER) - so excitingly, this will be the first time many people will have played the Replicant version of the game"
df[84,3] <- "Toylogic Inc."
Get ready to experience where the NieR series all began - NieR Replicant ver.1.22474487139...Set in a post-apocalyptic world, NieR Replicant ver.1.22474487139 is puts you in the role of the titular Nier, a young man on a quest to cure his sister Yonah of a deadly disease. What they discover will make them question everything they thought they knew The original NieR release has an interesting history. In Japan, there were two versions of the game: NieR Replicant and NieR Gestalt. NieR Replicant focused on Brother Nier and his sister Yonah. In NieR Gestalt, the main character was Father Nier, and Yonah his daughter. Only NieR Gestalt released in the West (under the name NIER) - so excitingly, this will be the first time many people will have played the Replicant version of the game
df[84,3] <- "Get ready to experience where the NieR series all began - NieR Replicant ver.1.22474487139...Set in a post-apocalyptic world, NieR Replicant ver.1.22474487139 is puts you in the role of the titular Nier, a young man on a quest to cure his sister Yonah of a deadly disease. What they discover will make them question everything they thought they knew The original NieR release has an interesting history. In Japan, there were two versions of the game: NieR Replicant and NieR Gestalt. NieR Replicant focused on Brother Nier and his sister Yonah. In NieR Gestalt, the main character was Father Nier, and Yonah his daughter. Only NieR Gestalt released in the West (under the name NIER) - so excitingly, this will be the first time many people will have played the Replicant version of the game"
df[84,4] <- "Toylogic Inc."                                            #dev
df[84,5] <- "Role-playing"                                #genre
df[84,2] <- 80                                         #points
df[5,4] <- "Lizardcube"                                            #dev
df[5,5] <- "Action"                                #genre
getwd()
write.csv(df, "new_released_games_data.csv")
all_games_link <- "https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered"
page <- read_html(all_games_link)
all_games_list <- page %>%
html_nodes(".title h3") %>%
html_text()
all_games_list1 <- page %>%
html_nodes(".title h3") %>%
html_text()
all_games_link <- "https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered?page=1"
page <- read_html(all_games_link)
all_games_list2 <- page %>%
html_nodes(".title h3") %>%
html_text()
all_games_list2
games <- data.frame(matrix(ncol=5, nrow=0))
col_names <- c("name", "point", "summary", "dev", "genre")
colnames(games) <- col_names
get_links <- function(game_link){
game_link <- game_link %>%
gsub(" ", "-", ., fixed = T) %>%
gsub(":", "", ., fixed = T) %>%
gsub("'", "", ., fixed = T) %>%
tolower()
game_page <- paste("https://www.metacritic.com/game/pc/",game_link, sep = "")
return(game_page)
}
links1 <- sapply(all_games_list1, get_links, USE.NAMES = F)
links2 <- sapply(all_games_list2, get_links, USE.NAMES = F)
get_game_features <- function(link){
print(link)
game_link <- read_html(link)
features <- game_link %>%
html_nodes(".product_summary .data span , .product_genre .label+ .data , .button , .positive span , h1") %>%
html_text()
if(length(features) > 5){
features <- features[c(1, 2, 5, 8, 9)]
}
games[nrow(games) + 1,] =  features
return(games)
}
games <- t(sapply(links1, get_game_features, USE.NAMES = F))
View(games)
games <- t(sapply(links2, get_game_features, USE.NAMES = F))
links <- c(links1,links2)
links
games <- t(sapply(links, get_game_features, USE.NAMES = F))
games <- data.frame(matrix(ncol=5, nrow=0))
col_names <- c("name", "point", "summary", "dev", "genre")
colnames(games) <- col_names
games <- t(sapply(links, get_game_features, USE.NAMES = F))
links[140]
links[141]
links[141] <- "https://www.metacritic.com/game/pc/there-is-no-game-wrong-dimension"
links[141]
games <- t(sapply(links, get_game_features, USE.NAMES = F))
View(games)
games_df <- as.data.frame(games) %>%
apply( 2, as.character)
View(games_df)
write.csv(games_df,"best_games_data.csv")
games_df_2 <- read.csv("best_games_data.csv")
View(games_df_2)
img_src <- read_html("https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered") %>%
html_nodes(".clamp-image-wrap a img") %>%
html_attr("src")
img_src1 <- read_html("https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered") %>%
html_nodes(".clamp-image-wrap a img") %>%
html_attr("src")
img_src2 <- read_html("https://www.metacritic.com/browse/games/score/metascore/all/pc/filtered?page=1") %>%
html_nodes(".clamp-image-wrap a img") %>%
html_attr("src")
img_src <- c(img_src1, img_src2)
img_src
x <- c(1:200)
x <- c(1:3)
for(i in x){
download.file(img_src[i], "./best_games_images/", mode = "wb")
}
for(i in x){
download.file(img_src[i], "best_games_images/", mode = "wb")
}
for(i in x){
download.file(img_src[i], "best_games_images/", mode = "wb")
}
for(i in x){
download.file(img_src[i], "best_games_images/", mode = "wb")
}
all_games_list1 <- all_games_list1 %>%
gsub(" ", "-", ., fixed = T) %>%
gsub(":", "", ., fixed = T) %>%
gsub("'", "", ., fixed = T) %>%
tolower()
all_games_list1
all_games_list2 <- all_games_list2 %>%
gsub(" ", "-", ., fixed = T) %>%
gsub(":", "", ., fixed = T) %>%
gsub("'", "", ., fixed = T) %>%
tolower()
all <- c(all_games_list1, all_games_list2)
all
for(i in x){
download.file(img_src[i], paste("./best_games_images/",all[i], ".jpg" ), mode = "wb")
}
x <- c(1:200)
for(i in x){
download.file(img_src[i], paste("./best_games_images/",all[i], ".jpg" ), mode = "wb")
}
