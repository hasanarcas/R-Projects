library(tidyverse)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price))
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price), binwidth = 300)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price), binwidth = 30)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price), binwidth = 3000)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price), binwidth = 300)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = carat))
count(diamonds, carat == 1)
count(diamonds, carat == 0.99)
count(diamonds, carat == 0.99)
?count
?ifelse
diamonds2 <- diamonds %>%
mutate(y = ifelse(y<3 | y>20, NA, y))
diamonds2
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggpot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
coord_flip()
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
nycflights13
nycflights13::flights
flights
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_boxplot()
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_boxplot()
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(y = sched_dep_time, x = cancelled))) +
geom_boxplot()
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(y = sched_dep_time, x = cancelled)) +
geom_boxplot()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut),  fill= "green")
View(diamonds2)
View(diamonds2)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(y = sched_dep_time, x = cancelled)) +
geom_boxplot()
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color), fill = n)
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
group_by(color)
diamonds %>%
count(color, cut) %>%
group_by(cut)
diamonds %>%
count(color, cut) %>%
group_by(color)
diamonds %>%
count(color, cut) %>%
group_by(color) %>%
mutate(prop = n / sum(n))
diamonds %>%
count(color, cut) %>%
group_by(color) %>%
mutate(prop = n / sum(n)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop))
flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay), na.rm = TRUE))
flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay), na.rm = TRUE)
library(nycflights13)
flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay), na.rm = TRUE)
flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay), na.rm = TRUE)
flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile()
flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile() +
labs(x = "Month", y = "Destination", fill = "Departure Delay")
flights %>%
group_by(month, dest)
View(flights %>%
group_by(month, dest))
flights %>%
group_by(month, dest) %>%                                 # This gives us (month, dest) pairs
summarise(dep_delay = mean(dep_delay, na.rm = TRUE))
install.packages("hexbin")
library("hexbin")
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = small_carat_diamonds) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = small_carat_diamonds) +
geom_hex(mapping = aes(x = carat, y = price))
diamonds %>%
count(cut, clarity) %>%
ggplot(aes(clarity, cut, fill = n)) +
geom_tile()
getwd()
library(tidyverse)
read.csv("./datasets/breast-cancer-wisconsin.csv")
read.csv("../datasets/breast-cancer-wisconsin.csv")
breast_cancer_data <- read.csv("../datasets/breast-cancer-wisconsin.csv")
View(breast_cancer_data)
View(data(BreastCancer))
X = breast_cancer_data[id:mitoses]
X = breast_cancer_data[id:]
X = breast_cancer_data[[id:mitoses]]
X = breast_cancer_data[c(id:mitoses)]
X = breast_cancer_data %>%
select(id:mitoses)
View(X)
y = breast_cancer_data %>%
select(class)
View(y)
train_test_split?
train_test_split?
d
train_test_split()
library(caret)
install.packages(caret)
install.packages("caret")
library(caret)
library(lattice)
library(caret)
getwd()
library(tidyverse)
library(lattice)
library(caret)
breast_cancer_data <- read.csv("../datasets/breast-cancer-wisconsin.csv")
X = breast_cancer_data %>%
select(id:mitoses)
y = breast_cancer_data %>%
select(class)
View(y)
breast_cancer_data <- read.csv("../datasets/breast-cancer-wisconsin.csv")
View(breast_cancer_data)
remove?
?remove
?remove
breast_cancer_data$X <- NULL
View(breast_cancer_data)
?drop
y = breast_cancer_data %>%
select(diagnosis)
View(y)
X = breast_cancer_data[, -2]
View(X)
set.seed(42)
test_inds
test_inds <- createDataPartition(y = 1:length(y), p = 0.2, list = F)
X_test <- X[test_inds,]
y_test <- y[test_inds]
X_train <- X[-test_inds,]
y_train <- y[-test_inds]
test_inds <- createDataPartition(y = 1:length(y), p = 0.2, list = F)
?createDataPartition
View(y)
y
length(y)
count(y)
test_inds <- createDataPartition(y = 1:count(y), p = 0.2, list = F)
test_inds <- createDataPartition(y, p = 0.2, list = F)
y
test_inds <- createDataPartition(y, p = 0.2, list = F)
test_inds <- createDataPartition(y$diagnosis, p = 0.2, list = F)
View(test_inds)
X_test <- X[test_inds,]
y_test <- y[test_inds]
X_train <- X[-test_inds,]
y_train <- y[-test_inds]
View(X)
View(X_test)
?glm
glm.fit <- glm(X, y, family = binomial)
View(X)
glm.fit <- glm(X, y, data = breast_cancer_data, family = binomial)
fit <- glm(y ~ X, family = binomial)
fit <- glm(y$diagnosis ~ X, family = binomial)
fit <- glm(y$diagnosis ~ X$id+X$radius_mean+X$texture_mean, family = binomial)
fit <- glm(diagnosis ~ .,data = breast_cancer_data, family = binomial)
fit <- glm(as.factor(diagnosis) ~ .,data = breast_cancer_data, family = binomial)
View(fit)
summary(fit)
mean(glm == diagnosis)
mean(glm.pred == diagnosis)
summary(fit)
y = breast_cancer_data %>%
select(diagnosis)
X = breast_cancer_data[, -2]
set.seed(42)
test_inds <- createDataPartition(y$diagnosis, p = 0.2, list = F)
train_data <- breast_cancer_data[-test_inds]
test_data <- breast_cancer_data[test_inds]
X_test <- X[test_inds,]
y_test <- y[test_inds]
X_train <- X[-test_inds,]
y_train <- y[-test_inds]
fit <- glm(as.factor(diagnosis) ~ .,data = train_data, family = binomial)
View(X)
View(breast_cancer_data)
train_data <- breast_cancer_data[-test_inds,]
test_data <- breast_cancer_data[test_inds,]
View(train_data)
View(test_data)
fit <- glm(as.factor(diagnosis) ~ .,data = train_data, family = binomial)
?predict
predictions <- predict(fit, type = "response")
predictions[1:5]
mean(predictions == as.factor(diagnosis))
mean(predictions == as.factor(breast_cancer_data$diagnosis))
?glm.fit
glm.probs <- predict(fit, newdata= test_data, type = "response")
predictions
predictions <- predict(fit, newdata= test_data)
predictions
mean(test_data$diagnosis == predictions)
predictions <- ifelse(predictions > 0 , "M", "B")
mean(test_data$diagnosis == predictions)
mean(test_data$diagnosis == predictions)
?prcomp
prcomp(X, scale. = T, center = T)
PCA <- prcomp(X, scale. = T, center = T)
summary(PCA)
PCA
View(PCA)
PCA$x
PCA[1:6]
select(PCA, PC1:PC6)
PCA
summary(PCA)
PCA
PCA[1:6]
PCA$x
PCA$x[1:6]
PCA$x[,1:6]
pca <- PCA$x[1:6]
pca
pca <- PCA$x[,1:6]
pca
heatmap(pca)
heatmap(as.matrix(pca))
heatmap(as.matrix(pca))
heatmap(as.matrix(pca), scale = "column")
pca$x
pca
PCA <- prcomp(X, scale. = T, center = T)
PCA$x
pca
fit_pca <- glm(as.factor(diagnosis)~. data = pca, family = binomial)
fit_pca <- glm(as.factor(diagnosis)~., data = pca, family = binomial)
train_data <- breast_cancer_data[-test_inds,]
test_data <- breast_cancer_data[test_inds,]
train_data_pca <- pca[-test_inds,]
test_data_pca <- pca[test_inds,]
View(test_data_pca)
View(test_data_pca)
View(train_data_pca)
fit_pca <- glm(as.factor(diagnosis)~., data = train_data_pca, family = binomial)
View(test_data_pca)
fit_pca <- glm(as.factor(diagnosis)~., data = as.data.frame(train_data_pca), family = binomial)
set.seed(2)
test_inds <- createDataPartition(y$diagnosis, p = 0.2, list = F)
train_data_pca <- pca[-test_inds,]
test_data_pca <- pca[test_inds,]
?glm.fit
library(tidyverse)
library(lattice)
library(caret)
breast_cancer_data <- read.csv("../datasets/breast-cancer-wisconsin.csv")
breast_cancer_data$X <- NULL
y = breast_cancer_data %>%
select(diagnosis)
X = breast_cancer_data[, -2]
PCA <- prcomp(X, scale. = T, center = T)
pca <- PCA$x[,1:6]
pca
?mutate
new_pca <- pca %>%
mutate(label = y)
as.data.frame(pca)
new_pca <- as.data.frame(pca) %>%
mutate(label = y)
View(new_pca)
fit_pca <- glm.fit(as.factor(label.diagnosis) ~ .,data = new_pca, family = binomial)
View(new_pca)
set.seed(42)
test_inds <- createDataPartition(y$diagnosis, p = 0.2, list = F)
train_data <- breast_cancer_data[-test_inds,]
test_data <- breast_cancer_data[test_inds,]
View(train_data)
new_pca <- as.data.frame(pca) %>%
mutate(y)
fit_pca <- glm.fit(as.factor(diagnosis) ~ .,data = new_pca, family = binomial)
fit_pca <- glm(as.factor(diagnosis) ~ .,data = new_pca, family = binomial)
predictions <- predict(fit, newdata= test_data)
predictions <- predict(fit_pca, newdata= test_data)
fit <- glm(as.factor(diagnosis) ~ .,data = train_data, family = binomial)
predictions <- predict(fit, newdata= test_data)
predictions <- ifelse(predictions > 0 , "M", "B")
mean(test_data$diagnosis == predictions)
new_predictions <- predict(fit_pca, newdata= test_data)
View(new_pca)
View(pca)
typeof(pca)
typeof(new_pca)
View(pca)
View(fit_pca)
View(fit)
as.double(new_pca)
pca[1]
pca[,1]
new_pca <- pca
View(new_pca)
new_pca$PC1
View(new_pca)
View(new_pca)
View(y)
new_pca$diagnosis <- y
View(new_pca)
new_pca <- pca
new_pca$diagnosis <- y
new_pca <- pca
View(new_pca)
pca[PC1]
pca["PC1"]
new_pca[,6] <- y
View(new_pca)
new_pca[,6] = y
new_pca[,6] = as.factor(y)
new_pca$diagnosis = y
View(new_pca)
new_pca$diagnosis = y$diagnosis
View(new_pca)
set.seed(2)
test_inds <- createDataPartition(y$diagnosis, p = 0.2, list = F)
train_data_pca <- pca[-test_inds,]
test_data_pca <- pca[test_inds,]
train_data_pca
pca$diagnosis = y$diagnosis
View(pca)
View(PCA)
pca <- PCA$x[,1:6]
View(pca)
pca <- PCA$x[,1:6]
View(pca)
class(pca)
class(train_data)
pca <- as.data.frame(PCA$x[,1:6])
pca
pca$diagnosis <- y$diagnosis
View(pca)
class(pca)
class(train_data)
set.seed(2)
test_inds <- createDataPartition(y$diagnosis, p = 0.2, list = F)
train_data_pca <- pca[-test_inds,]
test_data_pca <- pca[test_inds,]
fit_pca <- glm(as.factor(diagnosis) ~ .,data = train_data_pca, family = binomial)
new_predictions <- predict(fit_pca, newdata= test_data_pca)
new_predictions
new_predictions <- ifelse(new_predictions > 0, "M", "B")
mean(test_data_pca$diagnosis == new_predictions)
library(tidyverse)
library(lattice)
library(caret)
library(reshape2)
library(ggplot2)
# Analyzing the data
breast_cancer_data <- read.csv("../datasets/breast-cancer-wisconsin.csv")
breast_cancer_data$X <- NULL
breast_cancer_data_numeric <- select(breast_cancer_data, radius_mean:fractal_dimension_worst)
head(breast_cancer_data_numeric)
corr_matrix <- round(cor(breast_cancer_data_numeric),2)
melted_corr_matrix <- melt(corr_matrix)
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
geom_tile()
# prepare the data for training
y = breast_cancer_data %>%
select(diagnosis)
X = breast_cancer_data[, -2]
set.seed(42)
test_inds <- createDataPartition(y$diagnosis, p = 0.2, list = F)
train_data <- breast_cancer_data[-test_inds,]
test_data <- breast_cancer_data[test_inds,]
# Applying Logistic regression
fit <- glm(as.factor(diagnosis) ~ .,data = train_data, family = binomial)
predictions <- predict(fit, newdata= test_data)
predictions <- ifelse(predictions > 0 , "M", "B")
mean(test_data$diagnosis == predictions)
# Applying PCA and Logistic regression
PCA <- prcomp(X, scale. = T, center = T)
pca <- as.data.frame(PCA$x[,1:6])
pca$diagnosis <- y$diagnosis
set.seed(2)
test_inds <- createDataPartition(y$diagnosis, p = 0.2, list = F)
train_data_pca <- pca[-test_inds,]
test_data_pca <- pca[test_inds,]
fit_pca <- glm(as.factor(diagnosis) ~ .,data = train_data_pca, family = binomial)
new_predictions <- predict(fit_pca, newdata= test_data_pca)
new_predictions <- ifelse(new_predictions > 0, "M", "B")
mean(test_data_pca$diagnosis == new_predictions)
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
scale_x_discrete(breaks = seq(0, 100, by = 5)) +
geom_tile()
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
scale_x_discrete(breaks = seq(0, 50, by = 5)) +
geom_tile()
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
#scale_x_discrete(breaks = seq(0, 50, by = 5)) +
geom_tile()
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
scale_x_discrete(breaks = seq(0, 100, by = 10)) +
geom_tile()
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
geom_tile()
geom_tile()
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
geom_tile()
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
theme(axis.text.x = element_text(angle = 90))
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
theme(axis.text.x = element_text(angle = 90))
geom_tile()
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
geom_tile()
ggplot(melted_corr_matrix, aes(Var1, Var2, fill=value)) +
guides(x =  guide_axis(angle = 90)) +
geom_tile()
